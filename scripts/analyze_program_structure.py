#!/usr/bin/env python3
"""
Academic Program Structure Analyzer
Analyzes program.json and shows the structure that will be generated by the batch lesson generator
"""

import sys
import os
import json
from collections import defaultdict

# Add parent directory to path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from api.utils.lesson_service import AcademicProgramLoader

def analyze_program_structure(program_file: str = "ressources/program.json"):
    """Analyze and display the program structure"""
    
    print("üìö Academic Program Structure Analysis")
    print("=" * 60)
    
    # Load the program
    loader = AcademicProgramLoader(program_file)
    
    if not loader.program_data:
        print("‚ùå Could not load program data")
        return
    
    # Statistics
    total_topics = 0
    total_subcategories = 0
    total_categories = len(loader.program_data)
    semester_stats = defaultdict(int)
    category_stats = defaultdict(lambda: {"subcategories": 0, "topics": 0})
    
    print(f"üìä Overview:")
    print(f"   - Total UE Categories: {total_categories}")
    
    # Detailed breakdown
    print(f"\nüìã Detailed Structure:")
    
    for ue in loader.program_data:
        semester = ue.get("semester", 1)
        category = ue.get("category", "Unknown")
        subcategories = ue.get("subcategories", [])
        
        print(f"\nüèõÔ∏è  {category} (Semester {semester})")
        
        category_topic_count = 0
        for subcategory_data in subcategories:
            subcategory = subcategory_data.get("name", "Unknown")
            topics = subcategory_data.get("topics", [])
            
            print(f"   üìÇ {subcategory}")
            print(f"      üìù Topics ({len(topics)}):")
            
            for topic in topics:
                print(f"         ‚Ä¢ {topic}")
                total_topics += 1
                category_topic_count += 1
            
            total_subcategories += 1
        
        semester_stats[semester] += category_topic_count
        category_stats[category]["subcategories"] = len(subcategories)
        category_stats[category]["topics"] = category_topic_count
    
    # Summary statistics
    print(f"\nüìä Summary Statistics:")
    print(f"   - Total Categories: {total_categories}")
    print(f"   - Total Subcategories: {total_subcategories}")
    print(f"   - Total Topics: {total_topics}")
    
    print(f"\nüìÖ By Semester:")
    for semester, count in sorted(semester_stats.items()):
        print(f"   - Semester {semester}: {count} topics")
    
    print(f"\nüìö By Category:")
    for category, stats in category_stats.items():
        print(f"   - {category}:")
        print(f"     ‚Ä¢ Subcategories: {stats['subcategories']}")
        print(f"     ‚Ä¢ Topics: {stats['topics']}")
    
    # Directory structure preview
    print(f"\nüìÅ Directory Structure Preview (ressources/data/):")
    
    for ue in loader.program_data:
        category = ue.get("category", "Unknown")
        category_dir = category.replace(" - ", "_").replace(" ", "_").replace("/", "_")
        
        print(f"‚îú‚îÄ‚îÄ {category_dir}/")
        
        subcategories = ue.get("subcategories", [])
        for i, subcategory_data in enumerate(subcategories):
            subcategory = subcategory_data.get("name", "Unknown")
            subcategory_dir = subcategory.replace(" ", "_").replace("/", "_")
            topics = subcategory_data.get("topics", [])
            
            is_last_subcat = i == len(subcategories) - 1
            subcat_prefix = "‚îî‚îÄ‚îÄ " if is_last_subcat else "‚îú‚îÄ‚îÄ "
            
            print(f"‚îÇ   {subcat_prefix}{subcategory_dir}/")
            
            # Show first few topics as example
            topic_prefix = "    " if is_last_subcat else "‚îÇ   "
            for j, topic in enumerate(topics[:3]):  # Show first 3 topics
                topic_file = topic.replace(" ", "_").replace("/", "_").replace(",", "")
                print(f"{topic_prefix}    ‚îú‚îÄ‚îÄ {topic_file}_lesson_YYYYMMDD_HHMMSS.json")
            
            if len(topics) > 3:
                print(f"{topic_prefix}    ‚îî‚îÄ‚îÄ ... and {len(topics) - 3} more lesson files")
    
    # Batch generation estimates
    print(f"\n‚è±Ô∏è  Batch Generation Estimates:")
    print(f"   - Total lessons to generate: {total_topics}")
    print(f"   - Estimated time (2 sec/lesson): ~{total_topics * 2 / 60:.1f} minutes")
    print(f"   - Estimated time (5 sec/lesson): ~{total_topics * 5 / 60:.1f} minutes")
    print(f"   - With API delays: ~{total_topics * 8 / 60:.1f} minutes")
    
    # Storage estimates
    avg_lesson_size = 5  # KB per lesson (rough estimate)
    total_size_kb = total_topics * avg_lesson_size
    print(f"\nüíæ Storage Estimates:")
    print(f"   - Estimated total size: ~{total_size_kb / 1024:.1f} MB")
    print(f"   - Average per lesson: ~{avg_lesson_size} KB")
    
    return {
        "total_topics": total_topics,
        "total_categories": total_categories,
        "total_subcategories": total_subcategories,
        "semester_stats": dict(semester_stats),
        "category_stats": dict(category_stats)
    }

def show_top_topics_by_category(program_file: str = "ressources/program.json", limit: int = 3):
    """Show top topics from each category"""
    
    print(f"\nüîç Sample Topics by Category (first {limit} from each):")
    print("=" * 60)
    
    loader = AcademicProgramLoader(program_file)
    
    for ue in loader.program_data:
        category = ue.get("category", "Unknown")
        print(f"\nüìö {category}:")
        
        topic_count = 0
        for subcategory_data in ue.get("subcategories", []):
            subcategory = subcategory_data.get("name", "Unknown")
            topics = subcategory_data.get("topics", [])
            
            for topic in topics:
                if topic_count < limit:
                    print(f"   ‚Ä¢ {subcategory} > {topic}")
                    topic_count += 1
                else:
                    break
            
            if topic_count >= limit:
                break
        
        # Count remaining topics
        total_in_category = sum(len(sub.get("topics", [])) for sub in ue.get("subcategories", []))
        if total_in_category > limit:
            print(f"   ... and {total_in_category - limit} more topics")

def main():
    """Main analysis function"""
    
    try:
        # Analyze structure
        stats = analyze_program_structure()
        
        # Show sample topics
        show_top_topics_by_category()
        
        print(f"\nüéØ Ready for Batch Generation!")
        print(f"Run 'python scripts/generate_lesson_collection.py' to start generating lessons.")
        
    except Exception as e:
        print(f"‚ùå Error analyzing program structure: {e}")
        return False
    
    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 