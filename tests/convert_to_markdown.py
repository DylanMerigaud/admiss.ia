#!/usr/bin/env python3
"""
Convert JSON test outputs to Markdown format
Converts lesson generation test results to readable markdown files for documentation
"""

import json
import os
import glob
from datetime import datetime
from pathlib import Path

def load_json_file(file_path: str) -> dict:
    """Load JSON data from file"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        print(f"❌ Error loading {file_path}: {e}")
        return None

def format_lesson_to_markdown(data: dict, source_file: str) -> str:
    """Convert lesson data to markdown format"""
    
    lesson = data.get('lesson', {})
    exercise = data.get('exercise', {})
    questions = data.get('questions', [])
    
    # Extract key information
    topic = lesson.get('topic', 'Unknown Topic')
    category = lesson.get('category', 'Unknown Category')
    subcategory = lesson.get('subcategory', 'Unknown Subcategory')
    semester = lesson.get('semester', 'Unknown')
    content = lesson.get('lesson_content', '')
    objectives = lesson.get('learning_objectives', [])
    difficulty = lesson.get('difficulty_level', 'Unknown')
    lesson_id = lesson.get('lesson_id', 'Unknown')
    created_at = lesson.get('created_at', 'Unknown')
    
    # Generate markdown content
    md_content = f"""# 📚 Generated Lesson: {topic}

> **Academic Program Context:** {category} > {subcategory}  
> **Semester:** {semester} | **Difficulty:** {difficulty}  
> **Generated:** {created_at}  
> **Source:** {source_file}

---

## 📋 Lesson Overview

| Field | Value |
|-------|-------|
| **Lesson ID** | `{lesson_id}` |
| **Topic** | {topic} |
| **Category** | {category} |
| **Subcategory** | {subcategory} |
| **Semester** | {semester} |
| **Difficulty** | {difficulty} |
| **Content Length** | {len(content)} characters |
| **Questions Generated** | {len(questions)} |
| **Learning Objectives** | {len(objectives)} |

---

## 🎯 Learning Objectives

"""
    
    # Add learning objectives
    if objectives:
        for i, objective in enumerate(objectives, 1):
            md_content += f"{i}. **{objective.title()}** - Master the concepts related to {topic.lower()}\n"
    else:
        md_content += "*No specific learning objectives provided*\n"
    
    md_content += "\n---\n\n## 📖 Lesson Content\n\n"
    
    # Add lesson content
    if content:
        # Format content with proper paragraphs
        paragraphs = content.split('\n\n')
        for paragraph in paragraphs:
            if paragraph.strip():
                md_content += f"{paragraph.strip()}\n\n"
    else:
        md_content += "*No lesson content provided*\n\n"
    
    md_content += "---\n\n## ❓ Assessment Questions\n\n"
    
    # Add questions
    if questions:
        for i, question in enumerate(questions, 1):
            q_text = question.get('text', 'No question text')
            q_category = question.get('category', 'Unknown')
            q_subcategory = question.get('subcategory', 'Unknown')
            q_difficulty = question.get('difficulty', 'Unknown')
            q_options = question.get('options', [])
            q_correct = question.get('correct_answer', 'Unknown')
            q_explanation = question.get('explanation', 'No explanation provided')
            
            md_content += f"""### Question {i}

**Academic Context:** {q_category} > {q_subcategory}  
**Difficulty:** {q_difficulty}

**Question:** {q_text}

**Options:**
"""
            
            # Add options
            for option in q_options:
                option_id = option.get('id', '?')
                option_text = option.get('text', 'No text')
                # Mark correct answer
                marker = " ✅" if option_id == q_correct else ""
                md_content += f"- **{option_id.upper()})** {option_text}{marker}\n"
            
            md_content += f"""
**Correct Answer:** {q_correct.upper()}

**Explanation:** {q_explanation}

---

"""
    else:
        md_content += "*No assessment questions generated*\n\n"
    
    # Add exercise information if available
    if exercise:
        exercise_id = exercise.get('exercise_id', 'Unknown')
        target_concepts = exercise.get('target_concepts', [])
        
        md_content += f"""## 🎯 Exercise Information

| Field | Value |
|-------|-------|
| **Exercise ID** | `{exercise_id}` |
| **Target Concepts** | {', '.join(target_concepts) if target_concepts else 'None specified'} |
| **Question Count** | {len(exercise.get('question_ids', []))} |

---

"""
    
    # Add metadata
    md_content += f"""## 📊 Generation Metadata

- **Generated by:** Weaviate RAG Pipeline with Mistral API
- **Academic Program:** French Medical Education Curriculum
- **Timestamp:** {created_at}
- **Source File:** `{source_file}`

---

*This lesson was automatically generated using the academic program-aligned lesson generation system.*
"""
    
    return md_content

def convert_json_to_markdown(json_file: str, output_dir: str = "tests/markdown_outputs") -> str:
    """Convert a single JSON file to markdown"""
    
    print(f"📄 Converting: {json_file}")
    
    # Load JSON data
    data = load_json_file(json_file)
    if not data:
        return None
    
    # Create output directory
    os.makedirs(output_dir, exist_ok=True)
    
    # Generate markdown content
    md_content = format_lesson_to_markdown(data, os.path.basename(json_file))
    
    # Create output filename
    json_filename = Path(json_file).stem
    md_filename = f"{json_filename}.md"
    md_filepath = os.path.join(output_dir, md_filename)
    
    # Write markdown file
    try:
        with open(md_filepath, 'w', encoding='utf-8') as f:
            f.write(md_content)
        print(f"✅ Created: {md_filepath}")
        return md_filepath
    except Exception as e:
        print(f"❌ Error writing {md_filepath}: {e}")
        return None

def generate_index_file(markdown_files: list, output_dir: str = "tests/markdown_outputs"):
    """Generate an index markdown file listing all converted lessons"""
    
    index_content = f"""# 📚 Generated Lessons Index

> **Generated:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}  
> **Total Lessons:** {len(markdown_files)}

This directory contains markdown versions of all lesson generation test outputs from the academic program-aligned lesson generation system.

---

## 📋 Available Lessons

| # | Lesson File | Topic | Generated |
|---|-------------|-------|-----------|
"""
    
    # Process each markdown file to extract info
    for i, md_file in enumerate(sorted(markdown_files), 1):
        filename = os.path.basename(md_file)
        
        # Try to extract topic from filename or content
        try:
            # Read first few lines to get topic
            with open(md_file, 'r', encoding='utf-8') as f:
                lines = f.readlines()
                topic = "Unknown"
                generated = "Unknown"
                
                for line in lines[:10]:
                    if line.startswith("# 📚 Generated Lesson:"):
                        topic = line.replace("# 📚 Generated Lesson:", "").strip()
                    elif "**Generated:**" in line:
                        generated = line.split("**Generated:**")[1].split("|")[0].strip()
                        break
                        
        except Exception:
            topic = filename.replace('.md', '').replace('_', ' ').title()
            generated = "Unknown"
        
        index_content += f"| {i} | [{filename}](./{filename}) | {topic} | {generated} |\n"
    
    index_content += f"""
---

## 🎯 Academic Program Coverage

The lessons above cover topics from the following academic categories:
- **UE 1 - Biochemistry** (General Chemistry, Biomolecules)
- **UE 5 - Anatomy** (Systems and Apparatus)
- **UE 7 - Human and Social Sciences** (Various topics)

---

## 🔧 Generation System

- **RAG Pipeline:** Weaviate vector database + Mistral LLM
- **Academic Alignment:** French medical education program (program.json)
- **Personalization:** User context and learning objectives
- **Assessment:** Automatically generated QCM questions

---

*Generated by the academic program-aligned lesson generation system*
"""
    
    # Write index file
    index_path = os.path.join(output_dir, "README.md")
    try:
        with open(index_path, 'w', encoding='utf-8') as f:
            f.write(index_content)
        print(f"📋 Created index: {index_path}")
        return index_path
    except Exception as e:
        print(f"❌ Error creating index: {e}")
        return None

def main():
    """Main conversion function"""
    
    print("🔄 Converting JSON Test Outputs to Markdown")
    print("=" * 50)
    
    # Find all JSON output files in tests directory
    json_pattern = "tests/*.json"
    json_files = glob.glob(json_pattern)
    
    if not json_files:
        print("⚠️ No JSON output files found!")
        print(f"   Looking for pattern: {json_pattern}")
        print("   Run the lesson generation tests first to create output files.")
        return
    
    print(f"📁 Found {len(json_files)} JSON files to convert:")
    for file in json_files:
        print(f"   - {file}")
    
    print("\n🔄 Converting files...")
    
    # Convert each file
    markdown_files = []
    output_dir = "tests/markdown_outputs"
    
    for json_file in json_files:
        md_file = convert_json_to_markdown(json_file, output_dir)
        if md_file:
            markdown_files.append(md_file)
    
    # Generate index file
    if markdown_files:
        print(f"\n📋 Generating index file...")
        generate_index_file(markdown_files, output_dir)
    
    print(f"\n✅ Conversion complete!")
    print(f"📁 Output directory: {output_dir}")
    print(f"📄 Converted {len(markdown_files)} files")
    
    if markdown_files:
        print(f"\n📖 View results:")
        print(f"   - Index: {output_dir}/README.md")
        print(f"   - Lessons: {output_dir}/*.md")

if __name__ == "__main__":
    main() 